import {RmRecordDecoder} from '../../rm';
import {type RpcAcceptedReplyMessage, RpcAcceptStat, type RpcCallMessage, type RpcMessage} from '../messages';
import {RpcMessageDecoder} from '../RpcMessageDecoder';

const rmDecoder = new RmRecordDecoder();
const rpcDecoder = new RpcMessageDecoder();

const decode = (hex: string): RpcMessage | undefined => {
  const msg = Buffer.from(hex, 'hex');
  const u8 = new Uint8Array(msg);
  rmDecoder.push(u8);
  const record = rmDecoder.readRecord();
  if (record) {
    return rpcDecoder.decodeMessage(record);
  }
  return undefined;
};

const nfs3LookupCallHex =
  '80000090eb8a42cb0000000000000002000186a30000000300000003000000010000003c00490e680000001d455042594d494e573039333554312e6d696e736b2e6570616d2e636f6d000000000001f40000000a000000020000000a000001f400000000000000000000001c9725bb51046621880c000000a68c020078286c3e00000000000000000000000568656c6c6f000000';
const nfs3AccessCallHex =
  '80000088ea8a42cb0000000000000002000186a30000000300000004000000010000003c00490e680000001d455042594d494e573039333554312e6d696e736b2e6570616d2e636f6d000000000001f40000000a000000020000000a000001f400000000000000000000001c9725bb51046621880c000000a68c020078286c3e00000000000000000000001f';
const nfs3RaddirplusReplyHex =
  '800001b4ed8a42cb0000000100000000000000000000000000000000000000000000000100000002000001ed00000002000001f400000000000000000000020000000000000008000000003c000a009700000000000000410000000000028ca651ed1cc20000000051ed1cb00000000051ed1cb0000000000000000000000f59000000010000000000028ca6000000012e000000000000000000000c0000000100000002000001ed00000002000001f400000000000000000000020000000000000008000000003c000a009700000000000000410000000000028ca651ed1cc20000000051ed1cb00000000051ed1cb000000000000000010000001c9725bb51046621880c000000a68c020078286c3e0000000000000000000000010000000000012665000000022e2e000000000000000002000000000100000002000001ff00000005000003ea000000000000000000000200000000000000080000000096000400df0000000000000041000000000001266551ec763d0000000051e69ed20000000051e69ed200000000000000010000001c9725bb51046621880c000000652601008072c43300000000000000000000000000000001';

test('RPC Call LOOKUP', () => {
  const msg = decode(nfs3LookupCallHex) as RpcCallMessage;
  expect(msg.xid).toBe(0xeb8a42cb);
  expect(msg.rpcvers).toBe(2);
  expect(msg.prog).toBe(100003);
  expect(msg.vers).toBe(3);
  expect(msg.proc).toBe(3);
});

test('RPC Call ACCESS', () => {
  const msg = decode(nfs3AccessCallHex) as RpcCallMessage;
  expect(msg.xid).toBe(0xea8a42cb);
  expect(msg.rpcvers).toBe(2);
  expect(msg.prog).toBe(100003);
  expect(msg.vers).toBe(3);
  expect(msg.proc).toBe(4);
});

test('RPC Reply READDIRPLUS', () => {
  const msg = decode(nfs3RaddirplusReplyHex) as RpcAcceptedReplyMessage;
  expect(msg.xid).toBe(3985261259);
  expect(msg.stat).toBe(RpcAcceptStat.SUCCESS);
});
